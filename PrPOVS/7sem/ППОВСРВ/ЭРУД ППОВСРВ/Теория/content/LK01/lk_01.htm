<!-- (C) 2010 Nesterenkov Sergey, BSUIR -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<LINK rel=stylesheet href="../../../Оболочка/css/style2.css" type=text/css>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<title>Теория по дисциплине &quot;Программирование проблемно-ориентированных вычислительных средств реального времени&quot;</title>
<base target="_top">

<base target="_self">
<style type="text/css">
body,td,th { font-family: Times New Roman, Times, serif; }
p {margin-left: 5%; margin-right: 5%; }
</style></HEAD>

</HEAD><BODY>
<div class="Header_Style">
<table width="100%" border="0" cellpadding="0" cellspacing="3" background="../../../Оболочка/images/background.jpg">
  <tr> 
    <td width="13%" rowspan=3 align="center" ><img src="../../../Оболочка/images/logo_new.jpg" width=117 align="middle"></td>
  <tr> 
    <td width="70%" colspan=2 align="center" valign="middle"> <H1 align="center" >&nbsp;</H1>
      <H1 align="center" >Электронный ресурс по учебной дисциплине<BR>
        "Программирование проблемно-ориентированных вычислительных средств реального времени"<BR> 
        для специальности: </H1>
<p>1-40 02 02 "Электронные вычислительные средства"
</p></td>
    <td width="12%" rowspan=3 align="center" ><img src="../../images/theory.jpg" width="146" height="85"></td>
  <Tr>
    <td align=center colspan=2><var class="Header_Style"><A HREF="../../../index.htm">Оглавление</A> | <A HREF="../../../Программа/ППОВСРВ_программа_2017.htm" >Программа</A> | <a href="../../../Теория/theory.htm">Теория</a> | <a href="../../../Практика/practice.htm">Практика</a> | <A HREF="../../../Контроль_знаний/test.htm">Контроль знаний</A> | <A HREF="../../../Об авторах/author.htm">Об авторах</A></var></var> </td>
  <tr>
</table></div>



<!--start-->
	<div class="mainTitle" align="center">
	  <h1>Лекция № 1.1</h1>
</div>
	<div>
	  <h3 align="center"><strong>Раздел 1.  Технологии и инструментальные системы программирования проблемно-ориентированных  вычислительных средств реального времени</strong>      </h3>
      <p><strong>1.1&nbsp;&nbsp;&nbsp; Инструментальные системы программирования  проблемно-ориентированных вычислительных средств (2 часа)</strong><br>
        <strong><em>Лекция № 1.1</em></strong><br>
        Цели и задачи дисциплины. <br>
Понятие инструментальной системы  программирования проблемно-ориентированных вычислительных средств. <br>
      Назначение и  функции инструментальной системы программирования цифровых процессоров  обработки сигналов на примере инструментальной системы программирования фирмы  Texas Instruments Code Composer Studio. <br>
        Основные возможности, функционал и  эволюция Code Composer Studio.<br>
        Технологический процесс разработки  программного обеспечения с использованием Code Composer Studio. Основные  подсистемы Code Composer Studio: C/C++ компилятор, оптимизатор линейного  ассемблерного кода, транслятор языка ассемблера, компоновщик, архиватор,  утилита создания библиотек, формирователь списка перекрестных ссылок,  формирователь загрузочных файлов для программаторов, симулятор, отладчик,  система визуализации отладочной информации.<br>
      </p>
</div>

<div align="center">
<input type="button" class="buttonManage" value="&nbsp;В конец&nbsp;" onClick="document.location.href ='../LK24/lk_24.htm'" />
<input type="button" class="buttonManage" value="&nbsp;Перечень тем лекций&nbsp;" onClick="document.location.href ='../../theory.htm'" />
<input type="button" class="buttonManage" value="&nbsp;Вперед&nbsp;" onClick="document.location.href ='../LK02/lk_02.htm'" />
</div>

<!-- (C) 2017 Shemarov Alexander, BSUIR begin-->  
<div class="Text_Style"><h1>Цели и задачи дисциплины</h1>
</div>
<div class="Text_Style"><p>Учебная&nbsp; дисциплина &laquo;Программирование  проблемно-ориентированных вычислительных средств реального времени&raquo; является  одной из базовых дисциплин специальности1-40 02 02 &laquo;Электронные вычислительные  средства&raquo;. Изучение учебной дисциплины направлено на формирование профессиональных  компетенций специалистов в области проектирования, программирования и  эксплуатации вычислительных средств, ориентированных на решение определенных  классов задач, требующих расширения возможностей универсальных процессоров за  счет введения в них дополнительных архитектурных усовершенствований  (проблемно-ориентированные архитектуры процессоров). Программа дисциплины  предусматривает изучение основ программирования проблемно-ориентированных  процессоров, проектирования и практической реализации алгоритмов, обеспечивающих  функционирование специализированных вычислительных средств проблемно-ориентированныx вычислительных систем.</p>
  <p>    Целью преподавания учебной дисциплины  является изучение студентами основных принципов программирования  проблемно-ориентированных вычислительных средств реального времени и ознакомление  с основными алгоритмами цифровой обработки сигналов. Содержание дисциплины  включает сведения о практических принципах программирования цифровых  процессоров обработки сигналов (ЦПОС) и основных алгоритмах цифровой обработки  сигналов (ЦОС). Полученные при изучении дисциплины компетенции должны найти применение  при решении задач дипломного проектирования.<br>
    Объектом изучения учебной &nbsp;дисциплины являются специализированные вычислительные  средства реального времени.<br>
  Предметом изучения учебной дисциплины  являются технологии программирования цифровых процессоров обработки сигналов и  алгоритмы цифровой обработки сигналов.</p>
  <p><strong>Задачи изучения учебной  дисциплины:</strong><br>
  &ndash;&nbsp;приобретение знаний  об основных принципах программирования проблемно-ориентированных вычислительных  средств, работающих в масштабе реального времени;<br>
  &ndash;&nbsp;получение  практических навыков разработки и отладки алгоритмов и программ для  проблемно-ориентированных вычислительных средств;<br>
  &ndash;&nbsp;формирование инженерных  навыков и мышления.<br>
    В результате изучения  учебной дисциплины &laquo;Программирование проблемно-ориентированных вычислительных  средств реального времени&raquo; формируются следующие компетенции:<br>
  <strong>академические</strong><strong>:</strong></p>
  <ul>
    <ul>
      <ul>
        <li>АК-1.&nbsp;Уметь  применять базовые научно-теоретические знания для решения теоретических и  практических задач.</li>
        <li>АК-2.&nbsp;Владеть  системным и сравнительным анализом.</li>
        <li>АК-3.&nbsp;Владеть  исследовательскими навыками.</li>
        <li>АК-4.&nbsp;Уметь  работать самостоятельно.</li>
        <li>АК-5.&nbsp;Быть  способным порождать новые идеи (обладать креативностью).</li>
        <li>АК-6.&nbsp;Владеть  междисциплинарным подходом при решении проблем.</li>
        <li>АК-7.&nbsp;Иметь  навыки, связанные с использованием технических устройств, управлением  информацией и работой с компьютером.</li>
        <li>АК-8.&nbsp;Обладать  навыками устной и письменной коммуникации.</li>
        <li>АК-9.&nbsp;Уметь  учиться, повышать свою квалификацию в течение всей жизни.</li>
        <li>АК-11. Владеть  основными методами, способами и средствами получения, хранения, переработки  информации с использованием компьютерной техники.</li>
        <li>АК-14. На научной  основе организовывать свой труд, самостоятельно оценить результаты своей  деятельности.</li>
      </ul>
    </ul>
  </ul>
  <p><strong>социально-личностные</strong><strong>:</strong></p>
  <ul>
    <ul>
      <ul>
        <li>СЛК-1. Обладать  качествами гражданственности.</li>
        <li>СЛК-2. Быть  способным к социальному взаимодействию.</li>
        <li>СЛК-3. Обладать  способностью к межличностным коммуникациям.</li>
        <li>СЛК-4. Владеть  навыками здоровьесбережения.</li>
        <li>СЛК-5. Быть  способным к критике и самокритике.</li>
        <li>СЛК-6. Уметь  работать в команде.</li>
      </ul>
    </ul>
  </ul>
  <p><strong>профессиональные</strong><strong>:</strong></p>
  <ul>
    <ul>
      <ul>
        <li>ПК-1.  Осуществлять системный анализ объектов проектирования и предметной области, их  взаимосвязей.</li>
        <li>ПК-7.  Проектировать математическое, информационное и программное обеспечение  электронных вычислительных средств на основе современных методов, средств и  технологий проектирования, в том числе с использованием систем  автоматизированного проектирования.</li>
        <li>ПК-8. Выбирать  средства вычислительной техники и программирования, применять их для  эффективной реализации аппаратно-программных систем.</li>
        <li>ПК-13. Создавать  аппаратное и программное обеспечение электронных вычислительных средств  заданного качества в заданный срок.</li>
        <li>ПК-14.  Осуществлять тестирование аппаратного и программного обеспечения электронных  вычислительных средств.</li>
        <li>ПК-16.  Обеспечивать безопасные условия труда, выполнение требований пожарной  безопасности и проводить мероприятия по предотвращению производственного  травматизма и профессиональных заболеваний.</li>
        <li>ПК-20.  Организовывать внедрение объекта проектирования и разработки, в том числе  программного обеспечения, в опытную или промышленную эксплуатацию.</li>
        <li>ПК-24.  Устанавливать, настраивать и обслуживать системное, инструментальное и  прикладное программное обеспечение.</li>
        <li>ПК-30. Готовить  доклады, материалы к презентациям.</li>
        <li>ПК-31.  Пользоваться глобальными информационными ресурсами.</li>
        <li>ПК-32. Владеть  современными средствами инфокоммуникаций.</li>
        <li>ПК-34. Выполнять  анализ, систематизацию и обобщение научно-технической информации по теме  исследований.</li>
        <li>ПК-35.  Использовать математические модели, методы, компьютерные технологии и системы  поддержки принятия решений в научных исследованиях, проектно-конструкторской  деятельности, управлении технологическими, экономическими системами и в других  областях деятельности.</li>
        <li>ПК-36. Создавать  и исследовать математические и программные модели вычислительных и  информационных процессов, связанных с функционированием объектов  профессиональной деятельности.</li>
        <li>ПК-39.  Осуществлять экспериментальные исследования при проектировании объектов  профессиональной деятельности.</li>
      </ul>
    </ul>
  </ul>
  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; В результате изучения учебной дисциплины студент должен:<br>
    <strong><em>знать:</em></strong><br>
  &ndash;&nbsp;наиболее эффективные  и часто используемые на практике алгоритмы цифровой обработки сигналов;<br>
  &ndash;&nbsp;особенности систем  команд проблемно-ориентированных процессоров и их применения;<br>
  &ndash;&nbsp;принципы и приемы  программирования проблемно-ориентированных вычислительных средств реального  времени;<br>
  &ndash;&nbsp;язык ассемблера  проблемно-ориентированных процессоров;<br>
  &ndash;&nbsp;макросредства языка  ассемблера проблемно-ориентированных процессоров;<br>
  &ndash;&nbsp;основы структурного  программирования на языке C проблемно-ориентированных процессоров.<br>
  <strong><em>уметь:</em></strong><br>
  &ndash;&nbsp;разрабатывать алгоритмы  и программировать задачи цифровой обработки сигналов в реальном масштабе времени;<br>
  &ndash;&nbsp;использовать программное обеспечение инструментальных  средств разработки проблемно-ориентированных систем реального времени;<br>
  &ndash;&nbsp;отлаживать программы и тестировать разработанные  программы;<br>
  &ndash;&nbsp;анализировать и разрабатывать структуры данных решаемых  задач, определять форматы и формы их представления.<br>
  <strong><em>владеть:</em></strong><br>
  &ndash;&nbsp;методами  программирования вычислительных средств на базе ЦПОС;<br>
  &ndash;&nbsp;основами технологий программирования  систем цифровой обработки сигналов;<br>
  &ndash;&nbsp;навыками разработки  программ для ЦПОС, их отладки, проектирования и тестирования специализированных  вычислительных систем реального времени.</p>
</div>

<div class="Text_Style"><h1>Понятие инструментальной системы  программирования</h1></div>
<div class="Text_Style">

  <p><strong>Инструментальная система программирования </strong>&ndash; совокупность программ и аппаратно-программных комплексов,  обеспечивающих технологию разработки, отладки и внедрения создаваемых программных  продуктов.<br>
    Группы программных продуктов:<br>
  <strong>1. Средства для создания приложений:</strong> <br>
  <em>локальные средства</em>, обеспечивающие  выполнение отдельных видов работ по созданию программ, <em>условно можно подразделить  на</em>:<br>
  &ndash; языки и системы программирования;<br>
  &ndash; инструментальные среда пользователя.<br>
  <em>интегрированные среды разработчиков программ</em>, обеспечивающие выполнение комплекса взаимосвязанных работ  по созданию программ.<br>
  <strong>2. Средства для создания информационных  систем (Case&ndash;технологии), </strong>представляющие методы анализа, проектирования  и создания программных систем и предназначенные для автоматизации процессов разработки  и реализации компьютерных, коммуникационных и информационных систем, <em>также условно можно подразделить на</em>:<br>
  &ndash; встроенные в систему реализации;<br>
  &ndash; независимые от системы реализации.<br>
  <strong>Средства для создания приложений</strong> <br>
  <em>1. Локальные средства  разработки программ </em><br>
    Данные средства на рынке программных продуктов наиболее представительны  и включают языки и системы программирования, а также инструментальную среду пользователя.<br>
    Язык программирования &ndash; формализованный  язык для описания алгоритма решения задачи на компьютере. Они делятся на классы:<br>
  <em>&ndash; машинные языки</em> - языки  программирования, воспринимаемые аппаратной частью компьютера (машинные коды);<br>
  <em>&ndash; машинно-ориентированные языки</em> - языки  программирования, которые отражают структуру конкретного типа компьютера (ассемблеры);<br>
  <em>&ndash; алгоритмические языки</em> - не  зависящие от архитектуры компьютера языки программирования для отражения структуры  алгоритма;<br>
  <em>&ndash; процедурно-ориентированные  языки</em> &ndash; языки программирования, где имеется возможность описания программы  как совокупности процедур (подпрограмм);<br>
  <em>&ndash; проблемно-ориентированные языки</em> &ndash; предназначены  для решения задач определенного класса;<br>
  <em>&ndash; объектно-ориентированные  языки программирования (ООП) - </em>языки программирования которые используют объектно-ориентированную  парадигму программирования, в которой основными концепциями являются понятия объектов  и классов (либо, в менее известном варианте языков с использованием прототипирования  прототипов);<br>
  <em>&ndash; интегрированные системы программирования</em>.<br>
    Программа, подготовленная на языке программирования, проходит  этап <em>трансляции</em> - преобразование исходного кода программы в объектный код.  Трансляция может выполняться с помощью средств компиляторов или интерпретаторов. <em>Компиляторы</em> транслируют всю программу, но без ее выполнения. <em>Интерпретаторы</em> выполняют пооператорную обработку и выполнение программы. Существуют специальные  программы, предназначенные для отслеживания выполнения программы в пооператорном  варианте (трассировка) и анализа выполнения других программ &ndash; <em>отладчики</em>.<br>
    Системы программирования включают: <em>компилятор</em>, <em>интегрированную  среду разработчика программ; отладчик; средства оптимизации кода программ; набор  библиотек; редактор связей или компоновщик</em> (специальная программа, обеспечивающая  построение загрузочного модуля, пригодного к выполнению); <em>справочные системы;  систему поддержки и управления проектом программного комплекса.</em><br>
  <em>Средства поддержки проектов</em> &ndash; класс программного обеспечения, предназначенный для: отслеживания  изменений, выполненных разработчиком программ; поддержки версий программы с автоматической  разноской изменений; получение статистики о ходе работ проекта.<br>
    Инструментальная среда пользователя представлена специальными  средствами, встроенными в пакеты прикладных программ: макрокоманды; библиотека функций,  процедур, объектов и методов; клавишные макросы; языковые макросы; генераторы приложений;  языки запросов и манипулирования данными и многое другое.<br>
    Средства отладки и тестирования программ предназначены для подготовки  разработанной программы к промышленной эксплуатации.<br>
  <em>2.</em><em> Интегрированные среды разработки  программ</em> обеспечивают повышение производительности труда программистов,  автоматизацию создания кодов программ, обеспечивающих создание сложных интерфейсов  пользователя графического типа и иных компонентов создаваемых инструментальных  систем. </p>
</div>

<div class="Text_Style"><h1>Инструментальная система программирования фирмы Texas Instruments Code Composer Studio</h1></div>
<div class="Text_Style">
  <p>Code Composer Studio (CCS) является  интегрированной отладочной средой разработчика, которая объединяет в себе все  необходимые средства для проведения полного цикла разработки, от  конфигурирования системы, написания и компилирования программы до отладки и  анализа поведения алгоритма.<br></p></div>
  
<div class="Text_Style">
<h3 align="center"><a name="Рис1.1.1"></a><img alt="Рис.1.1.1" src="../../images/Ris1_1.jpg" width="843" height="820"></h3>
<h3 align="center">Рисунок 1.1.1 &ndash; Структура инструментальной система программирования фирмы Texas Instruments Code Composer Studio</h3>
</div>  

<div class="Text_Style">
  <p>   
    Выделенная часть отображает основные этапы   разработки программы с использованием инструментальной системы разработки. Остальные части обеспечивают дополнительные функции, которые расширяют возможности проектировщика проблемно-ориентированного программного обеспечения в процессе его разработки.<br>
  <strong>Assembly </strong><strong>optimizer </strong>(оптимизатор ассемблера)  позволяет писать линейный ассемблерный код без знания структуры конвейера  процессора и назначения регистров. На основе программы написанной на линейном  ассемблере ассемблерный оптимизатор генерирует ассемблерный код с  распараллеленными командами, максимально учитывая особенности процессорного  конвейера. <br>
  <strong>C</strong><strong> </strong><strong>compiler </strong>(C компилятор)  принимает C исходный код и производит TMS320C54xx исходный текст  ассемблера. <br>
    До недавнего времени уделом программистов на цифровых сигнальных процессорах был  ассемблер, однако на современном этапе надо учитывать целый ряд изменившихся  факторов. С одной стороны, усложнение алгоритмов делает их реализацию на  ассемблере всё более громоздкой и трудоёмкой. С другой стороны, всё более и  более жёстко регламентируются сроки выполнения проектов. Одновременно, усложнение  архитектуры самих цифровых сигнальных процессорах  и внедрение параллельных решений требуют от разработчика  знания всё больших объёмов информации, что требует от него высокой профессиональной подготовки. Это не позволяет большому количеству разработчиков эффективно решать основную  задачу   разработки основных алгоритмов положенных в основу разрабатываемых устройств.. Ещё одной особенностью является ускорение  развития архитектур цифровых сигнальных процессоров и более быстрая смена семейств, что требует обеспечивать большую  степень &ldquo;платформенной&rdquo; независимости и лучшую переносимость как между цифровыми сигнальными процессорами одного семейства, так и между семействами цифровых сигнальных процессоров.<br>
    Совокупность приведённых факторов определяет смену концепции  &mdash; переход от написания ассемблерных программ с ручной оптимизацией к написанию  алгоритмов на языке высокого уровня - С, С++, С#, хотя решение задач создания стандартного пользовательского интерфейса не является основными задачами решаемыми с использованием цифровых сигнальных процессоров. Как показывает практика, написание  программ для цифровых сигнальных процессорах на C в современных условиях при использовании оптимизирующих  компиляторов, эффективность которых непрерывно повышается, является оптимальным  решением по соотношению времени разработки и получаемой эффективности кода.<br>
    Для своих цифровых сигнальных процессоров фирма Texas Instruments выпускает свободно доступные DSPLib -  библиотеки оптимизированных ассемблерных функций цифровой обработки сигналов с заголовками для вызова  их из С - программ, использование которых существенно повышает оптимальность  кода.<br>
  <strong>Assembler  (</strong>транслятор) транслирует исходные файлы ассемблера в машинный язык -  объектные COFF файлы. COFF &ndash; это формат объектного файла, который поддерживает  модульное программирование и обеспечивает более мощные и гибкие методы  управления сегментами кода и памятью системы. Исходные файлы могут содержать  команды, директивы ассемблера, и макро директивы. Вы можете использовать  директивы ассемблера, чтобы управлять различными аспектами процесса трансляции,  типа формата программы, выравнивания данных, и т.п. См. &quot; TMS320C54xx CPU  and Instruction Set Reference Guide&rdquo; для детальной информации относительно  системы команд ассемблера.<br>
  <strong>Linker </strong>(Компоновщик) объединяет объектные  файлы в единую выполнимую программу - объектный COFF модуль. Компоновщик  принимает переместимые объектные COFF файлы (созданные ассемблером). Директивы  компоновщика позволяют объединять секции объектного файла, привязывать секции  или символы к адресам или в пределах диапазонов памяти, и определять или  переопределять глобальные символы.<br>
  <strong>Arhiver </strong>(Архиватор) позволяет собирать группу файлов в единый  файл архива, называемый библиотекой. Например, можно собрать несколько  макрокоманд в макро библиотеку. Ассемблер обращается к библиотеке и ищет  составляющие, которые вызываются исходным файлом как макрокоманды. Можно также  использовать архиватор, чтобы собрать группу объектных файлов в библиотеку  объектных модулей. Архиватор позволяет изменять библиотеку, удаляя, заменяя,  извлекая, или добавляя составляющие.<br>
  <strong>Library-build utility</strong> (утилита создания библиотек) позволяет создавать библиотеки, используемые C компилятором.<br>
  <strong>Cross-reference  lister </strong>(Формирователь списка  перекрестных ссылок) использует объектные файлы, чтобы произвести список  перекрестных ссылок, показывающий символы, их определения, и их ссылки в  исходных файлах компоновщика.<br>
  <strong>Hex </strong><strong>conversion </strong><strong>utility </strong>(Утилита шестнадцатеричного конвертирования) преобразует  объектный COFF-файл в один из нескольких стандартных шестнадцатеричных  ASCII-форматов, подходящих для загрузки в программатор.<br>
  <strong>Debugging Tools </strong> (Интегрированная система отладки) предоставляет программисту большое количество инструментов, применяемых при отладке программного обеспечения. К ним относятся следующие основные возможности предоставляемые Code Composer Studio при отладке программ:</p>
  <ul>
    <ul>
      <ul>
        <li>  Окно Watch 
          <ul>
            <li> Добавление и удаление выражений в окне Watch </li>
            <li> Редактирование переменных в окне Watch </li>
            <li> Использование окна QuickWatch </li>
          </ul>
        </li>
        <li> Контрольные точки 
          <ul>
            <li>Добавление и удаление контрольных точек </li>
            <li> Блокировка/активирование контрольных точек </li>
            <li> Условные и аппаратные контрольные точки </li>
          </ul>
        </li>
        <li>Пробные точки
          <ul>
            <li>Добавление и удаление пробных точек </li>
            <li>Установка связей пробных точек </li>
            <li> Блокировка/активирование пробных точек </li>
            <li>Условные и аппаратные пробные точки </li>
          </ul>
        </li>
        <li>Профилирование выполнения кода 
          <ul>
            <li>Профильные часы
            </li>
            <li>Установка параметров профильных часов </li>
            <li> Создание новой профильной сессии </li>
            <li> Создание профильной области </li>
            <li>Определение области исходного кода в качестве профильной области
            </li>
            <li>Определение области адресов качестве профильной области
            </li>
            <li> Создание стартовых и конечных точек </li>
            <li> Включение/отключение профильных областей </li>
            <li> Просмотр профильной статистики </li>
          </ul>
        </li>
        <li>Визуализация данных
        </li>
      </ul>
    </ul>
  </ul>
  <p>Встроенные средства визуализации данных позволяют просматривать данные и сигналы в их оригинальных форматах во множестве окон просмотра. Окна просмотра присоединяются к точкам подключения, и их содержимое изменяется в реальном времени во время выполнения программы. Эти возможности полезны в развивающихся приложениях для DSP таких как, связь, радиосвязь, обработка изображений.
  <br>
  Code Composer Studio также позволяет получать на одном графике сдвоенные диаграммы одновременно, например входной и выходной сигнал. Все параметры графиков доступны через контекстное меню, что облегчает контроль обрабатываемых данных и увеличивает удобство работы программиста.<br>
    Code Composer Studio позволяет графически отображать Быстрое Преобразование Фурье (БПФ). Компьютер выполняет БПФ над данными находящимися в буфере и выводит результат на частотной оси.<br> 
    Комплексный график БПФ состоит из реальной и мнимой части данных, отображенных одновременно на двух графиках, которые содержатся в одном окне. <br>Есть возможность одновременно в одном окне на двух графиках выводить амплитудные и фазовые составляющие спектра сигнала с помощью БПФ. <br>Одновременное отображение нескольких амплитудных спектров на одном графике позволяет отслеживать изменение амплитудного спектра во времени.<br>
    Использование «диаграммы глаза» (eye diagram) предоставляет механизм для качественного исследования точности сигнала. На этом графике входящие сигналы непрерывно добавляются друг на друга и отображаются в одном окне. Возврат к началу окна происходит если:<br> 
    -достигнуто условие возврата;<br>
    -достигнута граница окна отображения сигнала (по временной оси).<br>
    Можно также отображать изображения, чтобы проверить алгоритмы обработки изображения. Изображения могут быть основаны на RGB и YUV потоках данных. График может обновляться в любой точке вашей программы.
    Дисплейный буфер постоянно находится в памяти компьютера, таким образом, сохраняется хронология данных. Изображение в окне отображения генерируется от данных, которые находятся в дисплейном буфере.
  </p>
</div>
<div class="Text_Style">
<h3 align="center"><a name="Рис1.1.1"></a><img alt="Рис.1.1.2" src="../../images/Ris1_2.jpg" width="549" height="320"><img src="../../images/Ris1_2.jpg" width="549" height="320"></h3>
<h3 align="center">Рисунок 1.1.2 &ndash; Пример изображения полученный с помощью системы визуализации Code Composer Studio</h3>
</div>  

<!-- (C) 2017 Shemarov Alexander, BSUIR end-->  

<div align="center">
	<p>
	<input type="button" class="buttonManage" value="&nbsp;В конец&nbsp;" onClick="document.location.href ='../LK24/lk_24.htm'" />
	<input type="button" class="buttonManage" value="&nbsp;Перечень тем лекций&nbsp;" onClick="document.location.href ='../../theory.htm'" />
	<input type="button" class="buttonManage" value="&nbsp;Вперед&nbsp;" onClick="document.location.href ='../LK02/lk_02.htm'" />
    </p>
  
<div class="Text_Style"><br></div>
</div>


<!--end-->
<div class="Header_Style">
<table width="100%" border="0" cellpadding="0" cellspacing="3" bordercolor="#316AC5" background="../../../Оболочка/images/background.jpg">
	<Tr>
    <td align=center colspan=2><var class="Header_Style"><A HREF="../../../index.htm">Оглавление</A> | <A HREF="../../../Программа/ППОВСРВ_программа_2017.htm" >Программа</A> | <a href="../../../Теория/theory.htm">Теория</a> | <a href="../../../Практика/practice.htm">Практика</a> |<A HREF="../../../Контроль_знаний/test.htm">Контроль знаний</A> | <A HREF="../../../Об авторах/author.htm">Об авторах</A></var></var> </td>
  <Tr>
   <td align=center><a href="https://www.bsuir.by/" title="Официальный сайт БГУИР" target="_blank">(С) БГУИР</a></td>
  </tr>
</table></div>

</BODY></HTML>